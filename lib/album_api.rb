require 'media_api'

module VideoApi

# Wrapper class for the REST album API and other features.
#
class AlbumApi < MediaApi

  # Creates an AlbumApi object scoped to the given library
  # within the given account.  
  #
  # base_url:: the service base url - see online documentation for this value.
  # company_id:: the account's ID
  # library_id:: the ID of the library within the account to work with
  # license_key:: the license key to use for all authorization requests.  it can be the license key of a user associated with the given library, or an account-wide user.  
  def self.for_library(base_url, company_id, library_id, license_key)
     self.new(MediaApi.create_settings_hash(base_url, company_id, library_id, license_key), true)
  end

  # Creates an AlbumApi object scoped to the entire account (i.e. not to a specific library within the account).
  #
  # base_url:: the service base url - see online documentation for this value.
  # company_id:: the account's ID
  # license_key:: the license key to use for all authorization requests.  it must be the license key for an account-level user, not a user assigned to a specific library.  
  #
  # Note: to call the ingest or import methods, you must
  # call AlbumApi.for_library instead, or those methods will
  # raise an error.
  #
  def self.for_account(base_url, company_id, license_key)
    self.new(MediaApi.create_settings_hash(base_url, company_id, nil, license_key), false)
  end

  # Creates a new AlbumApi object from the given YAML settings file.
  # YAML file should contain the following keys: base_url, company_id, license_key.  It should also contain a library_id key if you want to scope the AlbumApi object to a specific library, or ingest/import albums.
  #
  def self.from_settings_file(path, require_library=false)
    self.new(MediaApi.settings_file_path_to_hash(path), require_library)
  end

  # Create an AlbumApi object from the given hash of values.
  # must contain base_url, company_id, and license_key, and
  # optionally library_id.
  def self.from_props(props, require_library=false)
    self.new(props, require_library)
  end

  def initialize(props, require_library=false)
    super(props, require_library)
  end

  # Calls the Album Metadata API, returning the given album's metadata.
  # album_id:: the album's ID
  # format:: an optional string specifying the format of the returned metadata.  If omitted or nil, returns the metadata as a tree of ruby objects generated from the metadata obtained in json format.
  # - 'xml': returns the metadata as an xml string
  # - 'json': returns the metadata as a json string
  #
  def get_album_metadata(album_id, format=nil)
    structured_data_request("albums/#{album_id}", 
                            add_view_auth_param,
                            format) do |album|      
      cleanup_custom_fields(album)
    end
  end

  # Returns the URL of an RSS feed of the entire account or library's albums.
  # params:: optional hash, adds criteria to the RSS feed URL.  See the online documentation for details.
  #
  # url = api.get_albums_rss_url {:from => '2009/01/01'}
  #
  def get_albums_rss_url(params={})
    http.create_url(create_search_sub_url(params, 'rss'))
  end

  # Calls the Search Albums API, constraining the search to only albums within the library if one was specified in the constructor.
  #
  # params:: (optional) hash specifying search criteria.  See the online documentation for details.  If omitted, the results will contain all albums in the library.
  # format:: optional format string.  if omitted, this method returns the metadata as a tree of ruby objects, generated by obtaining the search results in json format and parsing it.
  # - 'xml':: returns the search results as an xml string.
  # - 'json':: returns the search results as a json string.
  #
  # returns a page of Album Search API results.
  #
  # replaces the custom_fields and tags on each album with
  # a Hash containing one key per custom field or tag,
  # instead of the array returned in the JSON results
  #
  def search_albums(params={}, format=nil)
    search_media(params, format)
  end

  def create_search_sub_url(params, format)
    create_search_media_sub_url("albums", params, format)
  end

  def get_search_page_media(page)
    page.albums
  end

  # Calls search_albums (Album Search API) with the given hash of params, 
  # paginating through the entire result set, 
  # yielding to the provided block with each page of search results
  # as it is obtained.  The provided block can break the loop
  # (stop calling for further pages of results) by returning
  # false.  Any other return value will continue the loop.
  # params:: a hash of params to pass to search_albums.
  #
  # example:
  # search_albums_each_page({:query => "balloons"}) do |page|
  #   puts "#{page.albums.length} more albums"
  # end
  #
  def search_albums_each_page(params={}, &block)
    search_media_each_page(params, &block)
  end

  # Calls search_albums_each_page (Album Search API) 
  # with the given hash of params, 
  # paginating through the entire result set, 
  # yielding to the provided block with each album in each page of results.
  # The provided block can abort the loop by returning
  # false.  Any other return value will continue the loop.
  # params:: a hash of params to pass to search_albums.
  #
  # example:
  # search_albums_each({:query => "balloons"}) do |album|
  #   puts "album: #{album.album_id}"
  #   if some_condition(album)
  #     false  # aborts pagination loop
  #   end
  # end
  #
  def search_albums_each(params={}, &block) 
    search_media_each(params, &block)
  end

  # Calls the Album Create API with parameters based on the given Hash.
  #
  # for example:
  #
  # create_album_from_hash({:album => { 'title' => 'the_album_title' }})
  #
  def create_album_from_hash(params)
    format = params.delete(:format) || 'xml'
    album_api_result do
      http.post("companies/#{company_id}/albums.#{format}", add_update_auth_param.merge(params))
    end
  end

  # Calls the Delete Album API, removing the specified album.
  def delete_album(album_id)
    album_api_result do
      http.delete("albums/#{album_id}", add_update_auth_param)
    end
  end

  # Calls the Update Album API, modifying the given's album's metadata.
  # album_id:: the ID of the album in question.
  # params:: a hash specifying how to update the album's metadata.  See the online documentation for details.
  #
  # As a convenience, this method will wrap any params in album[],
  # and also allows keyword params, meaning that you can specify each 
  # param key in the hash in one of three ways:
  #
  # {"album[title]" => "my new title"}
  #
  # {"album" => "my new title"}
  #
  # {:album => "my new title"}
  #
  # this method will convert them to the right format for the API call.
  #
  def update_album(album_id, params)
    album_api_result do
      http.put("albums/#{album_id}", add_update_auth_param(wrap_update_params(params, "album")))
    end
  end

  protected

  def tag_media_type
    "albums"
  end

  def media_api_result(exception_class=AlbumApiException, &block)
    begin
      super(exception_class, &block)
    rescue MediaApiAuthenticationFailedException => e
      raise AlbumApiAuthenticationFailedException.new(e)
    rescue AlbumApiException => e
      raise
    rescue MediaApiException => e
      raise AlbumApiException.new(e)
    end
  end

  def album_api_result(exception_class=AlbumApiException, &block)
    media_api_result(exception_class, &block)
  end

  def create_search_sub_url(params, format)
    create_search_media_sub_url("albums", params, format)
  end

  def get_search_page_media(page)
    page.albums
  end

  def get_album_api_media_object_id(album)
    trac.album_id
  end

end

# Raised whenever an exception condition is encountered when calling AlbumApi methods, including exceptions stemming from HttpClient.
class AlbumApiException < MediaApiException
  def init(source)
    super(source)
  end
end

# Raised by AlbumApi if it fails to obtain a valid authentication signature, most likely because the license key provided wasn't valid, or it has made more than the allowed number of authentication API calls per minute.
class AlbumApiAuthenticationFailedException < AlbumApiException
  def init(source)
    super(source)
  end
end

end # VideoApi module
