require 'media_api'

module VideoApi

# Wrapper class for the REST image API and other features.
#
class ImageApi < MediaApi

  # Creates an ImageApi object scoped to the given library
  # within the given account.  
  #
  # base_url:: the service base url - see online documentation for this value.
  # company_id:: the account's ID
  # library_id:: the ID of the library within the account to work with
  # license_key:: the license key to use for all authorization requests.  it can be the license key of a user associated with the given library, or an account-wide user.  
  def self.for_library(base_url, company_id, library_id, license_key)
     self.new(MediaApi.create_settings_hash(base_url, company_id, library_id, license_key), true)
  end

  # Creates an ImageApi object scoped to the entire account (i.e. not to a specific library within the account).
  #
  # base_url:: the service base url - see online documentation for this value.
  # company_id:: the account's ID
  # license_key:: the license key to use for all authorization requests.  it must be the license key for an account-level user, not a user assigned to a specific library.  
  #
  # Note: to call the ingest or import methods, you must
  # call ImageApi.for_library instead, or those methods will
  # raise an error.
  #
  def self.for_account(base_url, company_id, license_key)
    self.new(MediaApi.create_settings_hash(base_url, company_id, nil, license_key), false)
  end

  # Creates a new ImageApi object from the given YAML settings file.
  # YAML file should contain the following keys: base_url, company_id, license_key.  It should also contain a library_id key if you want to scope the ImageApi object to a specific library, or ingest/import images.
  #
  def self.from_settings_file(path, require_library=false)
    self.new(MediaApi.settings_file_path_to_hash(path), require_library)
  end

  # Create an ImageApi object from the given hash of values.
  # must contain base_url, company_id, and license_key, and
  # optionally library_id.
  def self.from_props(props, require_library=false)
    self.new(props, require_library)
  end

  def initialize(props, require_library=false)
    super(props, require_library)
  end

  # Calls the Image Metadata API, returning the given image's metadata.
  # image_id:: the image's ID
  # format:: an optional string specifying the format of the returned metadata.  If omitted or nil, returns the metadata as a tree of ruby objects generated from the metadata obtained in json format.
  # - 'xml': returns the metadata as an xml string
  # - 'json': returns the metadata as a json string
  #
  def get_image_metadata(image_id, format=nil)
    structured_data_request("images/#{image_id}", 
                            add_view_auth_param,
                            format) do |image|      
      cleanup_custom_fields(image)
    end
  end

  # Returns the URL of an RSS feed of the entire account or library's images.
  # params:: optional hash, adds criteria to the RSS feed URL.  See the online documentation for details.
  #
  # url = api.get_images_rss_url {:from => '2009/01/01'}
  #
  def get_images_rss_url(params={})
    http.create_url(create_search_sub_url(params, 'rss'))
  end

  # Calls the Image Search API, constraining the search to only images within the library if one was specified in the constructor.
  #
  # params:: (optional) hash specifying search criteria.  See the online documentation for details.  If omitted, the results will contain all images in the library.
  # format:: optional format string.  if omitted, this method returns the metadata as a tree of ruby objects, generated by obtaining the search results in json format and parsing it.
  # - 'xml':: returns the search results as an xml string.
  # - 'json':: returns the search results as a json string.
  #
  # returns a page of Image Search API results.
  #
  # replaces the custom_fields and tags on each image with
  # a Hash containing one key per custom field or tag,
  # instead of the array returned in the JSON results
  #
  def search_images(params={}, format=nil)
    search_media(params, format)
  end

  def create_search_sub_url(params, format)
    create_search_media_sub_url("images", params, format)
  end

  def get_search_page_media(page)
    page.images
  end

  # Calls search_images (Image Search API) with the given hash of params, 
  # paginating through the entire result set, 
  # yielding to the provided block with each page of search results
  # as it is obtained.  The provided block can break the loop
  # (stop calling for further pages of results) by returning
  # false.  Any other return value will continue the loop.
  # params:: a hash of params to pass to search_images.
  #
  # example:
  # search_images_each_page({:query => "balloons"}) do |page|
  #   puts "#{page.images.length} more images"
  # end
  #
  def search_images_each_page(params={}, &block)
    search_media_each_page(params, &block)
  end

  # Calls search_images_each_page (Image Search API) 
  # with the given hash of params, 
  # paginating through the entire result set, 
  # yielding to the provided block with each image in each page of results.
  # The provided block can abort the loop by returning
  # false.  Any other return value will continue the loop.
  # params:: a hash of params to pass to search_images.
  #
  # example:
  # search_images_each({:query => "balloons"}) do |image|
  #   puts "image: #{image.image_id}"
  #   if some_condition(image)
  #     false  # aborts pagination loop
  #   end
  # end
  #
  def search_images_each(params={}, &block) 
    search_media_each(params, &block)
  end

  # Calls the Upload API, uploading an image file
  # from the local hard drive to your online account, 
  # putting the content into the library you provided in the 
  # constructor of this api object.
  #
  # filename:: the filepath of the image file to upload to the account.

  # params:: optional hash specifying metadata.  
  #
  # See the online documentation for other allowed params.  
  #
  # To specify an ingest profile, include :ingest_profile 
  # in params.  It will be used in the call to authenticate_for_ingest.
  #
  def upload_image(filename, album_id, params={}, &progress_listener)
    signature  = authenticate_for_update
    upload_uri = URI.parse("#{base_url}images?album_id=#{album_id}&signature=#{signature}")
    image_api_result do
      http = HttpClient.new(upload_uri.host, upload_uri.port)
      uri  = "#{upload_uri.path}?#{upload_uri.query}"
      http.post_multipart_file_upload(uri, filename, {}, &progress_listener)
    end
  end
  
  # Calls the Delete Image API, moving the specified image
  # to the trash.
  def delete_image(image_id)
    image_api_result do
      http.delete("images/#{image_id}", add_update_auth_param)
    end
  end

  # Calls the Delete Image API, moving the specified image(s)
  # to the trash. Differs from delete_image in that it takes
  # an array of image ids, rather than a single image id.
  def delete_many_images(image_ids)
    the_params = {
      :delete    => { :image_id => image_ids.join(',') },
      :image_id  => image_ids.first,
      :signature => authenticate_for_update
    }
    image_api_result do
      http.post("images/delete_many", the_params )
    end
  end

  # Calls the Update Image API, modifying the given's image's metadata.
  # image_id:: the ID of the image in question.
  # params:: a hash specifying how to update the image's metadata.  See the online documentation for details.
  # nowrap:: an optional boolean. When true, the params will NOT be wrapped inside 'image', as is typical.
  #   A true nowrap value is needed for manipulationof some presentation details of the image, such as angle.
  #
  # As a convenience, this method will wrap any params in image[],
  # and also allows keyword params, meaning that you can specify each 
  # param key in the hash in one of three ways:
  #
  # {"image[title]" => "my new title"}
  #
  # {"image" => "my new title"}
  #
  # {:image => "my new title"}
  #
  # this method will convert them to the right format for the API call.
  #
  def update_image(image_id, params, nowrap=false)
    image_api_result do
      new_params = nowrap ? params : wrap_update_params(params, "image")
      http.put("images/#{image_id}", add_update_auth_param(new_params))
    end
  end

  # Moves the image out of the trash, using a call to the Update Image API,
  # specifyng a blank deleted_at value.
  #
  # Images remain in the trash for 7 days.  During that 7-day period,
  # you can call this method to remove the image from the trash ("undelete" it).
  # After the image is permanently deleted (7 days later), this
  # method will raise an error because the image will no longer exist.
  #
  def undelete_image(image_id)
    update_image(image_id, {:deleted_at => ""})
  end

  # NOTE: This method is deprecated.  Instead, use search_images, 
  # specifying a value for the 'tags' parameter, which will return the same
  # results as this method.
  #
  # Calls the Tags API, returning the IDs of all images tagged with the given tag.  If a library_id was provided in the constructor, only returns results for that library.
  # tag:: the tag to search for
  # format:: optional, specifies the format to return the results in.  If ommitted, this method just returns an Array of matching images' IDs.
  # - 'xml': returns the results as an xml string
  # - 'json': return the results as a json string.
  #
  def get_images_with_tag(tag, params={}, format=nil)
    get_media_with_tag("images", tag, params, format)
  end

  # Calls the Delivery Statistics API.  If a library_id was provided to the constructor, returning only results for that library.
  # params:: a hash specifying the criteria of the statistics report.  See the online documentation for details.
  # format:: an optional string specifying how to return the results.  If omitted, returns them as a ruby object tree, produced by parsing the JSON results.
  # - 'xml': returns the results in xml format.
  # - 'json': returns the results in json format.
  #
  def get_delivery_stats(params, format=nil)
    structured_data_request("#{create_account_library_url}/statistics/image_delivery", 
                           add_view_auth_param(params),
                           format)
  end

  # Calls the Image Statistics API, returning statistics for the given image.  Usage is otherwise identical to get_delivery_stats_for_library.
  # image_id:: the ID of the image in question.
  def get_stats_for_image(image_id, params, format=nil)
    structured_data_request("images/#{image_id}/statistics", 
                           add_view_auth_param(params),
                           format)
  end

  # Calls the Ingest Statistics API, returning statistics about image ingesting activity.  If library_id was provided in the constructor, only returns results for that library.  See online documentation for details.  
  # params:: hash specifying the criteria for statistics report.
  # format:: optional string specifying the result format.
  # - if omitted, returns the results as a ruby object tree.
  # - 'xml': returns the results in xml format.
  # - 'json': returns the results in JSON format.
  #
  def get_ingest_stats(params, format=nil)
    structured_data_request("#{create_account_library_url}/statistics/image_ingest", 
                           add_view_auth_param(params),
                           format)
  end

  # Calls the Storage Statistics API, returning statistics about image storage.  If library_id was provided in the constructor, only returns results for that library.  See online documentation for details.  
  # params:: hash specifying the criteria for statistics report.
  # format:: optional string specifying the result format.
  # - if omitted, returns the results as a ruby object tree.
  # - 'xml': returns the results in xml format.
  # - 'json': returns the results in JSON format.
  # - 'csv': returns the tesults in CSV format
  def get_storage_stats(params, format=nil)
    structured_data_request("#{create_account_library_url}/statistics/image_publish/disk_usage", 
                            add_view_auth_param(params),
                            format)
  end

  protected

  def tag_media_type
    "images"
  end

  def media_api_result(exception_class=ImageApiException, &block)
    begin
      super(exception_class, &block)
    rescue MediaApiAuthenticationFailedException => e
      raise ImageApiAuthenticationFailedException.new(e)
    rescue ImageApiException => e
      raise
    rescue MediaApiException => e
      raise ImageApiException.new(e)
    end
  end

  def image_api_result(exception_class=ImageApiException, &block)
    media_api_result(exception_class, &block)
  end

  def create_search_sub_url(params, format)
    create_search_media_sub_url("images", params, format)
  end

  def get_search_page_media(page)
    page.images
  end

  def get_image_api_media_object_id(image)
    trac.image_id
  end

end

# Raised whenever an exception condition is encountered when calling ImageApi methods, including exceptions stemming from HttpClient.
class ImageApiException < MediaApiException
  def init(source)
    super(source)
  end
end

# Raised by ImageApi if it fails to obtain a valid authentication signature, most likely because the license key provided wasn't valid, or it has made more than the allowed number of authentication API calls per minute.
class ImageApiAuthenticationFailedException < ImageApiException
  def init(source)
    super(source)
  end
end

end # VideoApi module
